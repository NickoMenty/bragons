{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RoadMap","text":"Something is comming... <p>Certainly! Here is a documentation template for your Solidity code:</p>"},{"location":"#crypto-nft-project-roadmap","title":"Crypto NFT Project Roadmap","text":""},{"location":"#1-project-inception","title":"1. Project Inception","text":"<ul> <li>Define Project Vision and Goals:<ul> <li>Clearly outline the purpose and objectives of your crypto NFT project.</li> <li>Identify the unique value proposition and target audience.</li> </ul> </li> </ul>"},{"location":"#2-pre-launch-preparation","title":"2. Pre-Launch Preparation","text":"<ul> <li> <p>Conceptualize Tokenomics:</p> <ul> <li>Design a comprehensive tokenomics model.</li> <li>Decide on the total supply, minting cost, utility, and distribution strategy.</li> </ul> </li> <li> <p>Smart Contract Development:</p> <ul> <li>Develop and audit smart contracts for minting and governance.</li> <li>Ensure security and compliance with best practices.</li> </ul> </li> </ul>"},{"location":"#3-website-development","title":"3. Website Development","text":"<ul> <li> <p>Check Eligibility Website:</p> <ul> <li>Create a user-friendly website for users to check their eligibility for minting NFTs.</li> <li>Implement a secure authentication process.</li> </ul> </li> <li> <p>NFT Minting Website:</p> <ul> <li>Develop a platform for users to mint NFTs seamlessly.</li> <li>Integrate a smooth payment gateway for minting fees.</li> </ul> </li> </ul>"},{"location":"#4-nft-minting","title":"4. NFT Minting","text":"<ul> <li> <p>Launch Minting Platform:</p> <ul> <li>Open the minting platform to the public.</li> <li>Promote the minting process through marketing channels.</li> </ul> </li> <li> <p>Community Engagement:</p> <ul> <li>Encourage community participation and collaboration.</li> <li>Establish social media channels and a community forum.</li> </ul> </li> </ul>"},{"location":"#5-reveal-of-nfts","title":"5. Reveal of NFTs","text":"<ul> <li> <p>Reveal Event:</p> <ul> <li>Organize a captivating event to reveal the minted NFTs.</li> <li>Leverage social media and influencers for maximum visibility.</li> </ul> </li> <li> <p>Limited Edition Drops:</p> <ul> <li>Introduce limited edition drops to create scarcity and demand.</li> <li>Implement countdown timers for anticipation.</li> </ul> </li> </ul>"},{"location":"#6-game-development","title":"6. Game Development","text":"<ul> <li> <p>NFT Battle Game:</p> <ul> <li>Develop an engaging game where users can battle with their NFTs.</li> <li>Integrate blockchain technology for transparency and ownership.</li> </ul> </li> <li> <p>Reward Mechanism:</p> <ul> <li>Implement a reward system for players based on their NFT performance.</li> <li>Create in-game assets and utilities tied to NFT ownership.</li> </ul> </li> <li> <p>Leaderboards and Tournaments:</p> <ul> <li>Introduce leaderboards and organize tournaments for competitive gameplay.</li> <li>Foster a competitive and active community.</li> </ul> </li> </ul>"},{"location":"#7-community-building","title":"7. Community Building","text":"<ul> <li> <p>Community Events:</p> <ul> <li>Host regular community events, AMAs, and giveaways.</li> <li>Build a strong community presence on social media.</li> </ul> </li> <li> <p>Governance Implementation:</p> <ul> <li>Integrate decentralized governance for community decision-making.</li> <li>Allow token holders to vote on proposals and upgrades.</li> </ul> </li> </ul>"},{"location":"#8-partnerships-and-collaborations","title":"8. Partnerships and Collaborations","text":"<ul> <li> <p>Strategic Partnerships:</p> <ul> <li>Explore partnerships with other NFT projects, influencers, and platforms.</li> <li>Collaborate for cross-promotions and increased visibility.</li> </ul> </li> <li> <p>Integration with Other Platforms:</p> <ul> <li>Investigate opportunities to integrate or showcase NFTs on popular platforms.</li> <li>Expand the project's reach and user base.</li> </ul> </li> </ul>"},{"location":"#9-continuous-improvement","title":"9. Continuous Improvement","text":"<ul> <li> <p>Feedback Loop:</p> <ul> <li>Establish a feedback mechanism for users to share their experiences.</li> <li>Iterate on the project based on user suggestions and market trends.</li> </ul> </li> <li> <p>Upgrades and Expansions:</p> <ul> <li>Implement periodic upgrades to the smart contracts and platforms.</li> <li>Consider expanding the project's ecosystem with new features.</li> </ul> </li> </ul>"},{"location":"#10-long-term-sustainability","title":"10. Long-Term Sustainability","text":"<ul> <li> <p>Community-Led Initiatives:</p> <ul> <li>Empower the community to initiate and lead projects within the ecosystem.</li> <li>Support community-driven initiatives.</li> </ul> </li> <li> <p>Education and Outreach:</p> <ul> <li>Educate the community about blockchain, NFTs, and the project's mission.</li> <li>Promote the adoption of the project's NFTs in various applications.</li> </ul> </li> </ul>"},{"location":"#additional-ideas-for-implementation","title":"Additional Ideas for Implementation:","text":"<ul> <li> <p>Virtual Events and Conferences:</p> <ul> <li>Host virtual events and conferences to bring the community together.</li> <li>Invite industry experts and thought leaders.</li> </ul> </li> <li> <p>NFT Staking and Farming:</p> <ul> <li>Introduce staking and farming mechanisms for NFT holders.</li> <li>Provide additional rewards for long-term engagement.</li> </ul> </li> <li> <p>Collaborative Art Projects:</p> <ul> <li>Collaborate with artists for unique NFT art collections.</li> <li>Showcase the intersection of technology and art.</li> </ul> </li> <li> <p>NFT Integration with DeFi:</p> <ul> <li>Explore opportunities to integrate NFTs with decentralized finance (DeFi).</li> <li>Create innovative financial instruments tied to NFT ownership.</li> </ul> </li> <li> <p>Environmental Sustainability Initiatives:</p> <ul> <li>Implement eco-friendly practices and contribute to environmental sustainability.</li> <li>Explore partnerships with projects focusing on green initiatives.</li> </ul> </li> </ul>"},{"location":"02-bragonContract/","title":"Bragon Nft Contract","text":""},{"location":"02-bragonContract/#overview","title":"Overview","text":"<p>The <code>DragonNft</code> contract is a Solidity smart contract that implements an ERC721-compatible non-fungible token (NFT) standard with URI storage. This contract allows users to mint dragon-themed NFTs, and it includes functionalities such as minting, airdropping, and claiming yield and gas rewards using the <code>IBlast</code> interface.</p>"},{"location":"02-bragonContract/#blast-technology-usage","title":"Blast technology usage","text":""},{"location":"02-bragonContract/#enums","title":"Enums","text":""},{"location":"02-bragonContract/#yieldmode","title":"<code>YieldMode</code>","text":"<p>We can switch between different modes our contract will generate $. Damn, we can leave all ETH from mint and just farm 4% ROI . Blast is a blast! </p> <ul> <li>AUTOMATIC: Automatic yield mode.</li> <li>VOID: Void yield mode.</li> <li>CLAIMABLE: Claimable yield mode.</li> </ul>"},{"location":"02-bragonContract/#gasmode","title":"<code>GasMode</code>","text":"<p>The same goes with gas modes. As you know, all gas that you spend while interacting with our NFTs is claimable! Thus, we may think about a good usage of this technology in future!</p> <ul> <li>VOID: Void gas mode.</li> <li>CLAIMABLE: Claimable gas mode.</li> </ul>"},{"location":"02-bragonContract/#contract-structure","title":"Contract Structure","text":""},{"location":"02-bragonContract/#contract-inheritance","title":"Contract Inheritance","text":"<p>The <code>DragonNft</code> contract inherits from both the <code>ERC721URIStorage</code> and <code>Ownable</code> contracts, providing ERC721 token functionality and ownership control over the contract.</p>"},{"location":"02-bragonContract/#structs","title":"Structs","text":"<p>None</p>"},{"location":"02-bragonContract/#events","title":"Events","text":"<ul> <li>NftMinted: Fired when a new NFT is minted.</li> <li>TokensAirdropped: Fired when tokens are airdropped to multiple recipients.</li> </ul>"},{"location":"02-bragonContract/#errors","title":"Errors","text":"<ul> <li>DragonNft__AlreadyInitialized: Contract already initialized error.</li> <li>DragonNft__NeedMoreETHSent: Insufficient ETH sent error.</li> <li>DragonNft__RangeOutOfBounds: Out-of-bounds range error.</li> <li>DragonNft__TransferFailed: Transfer failed error.</li> <li>DragonNft__MaxSupplyReached: Maximum supply reached error.</li> <li>DragonNft__InvalidAirdrop: Invalid airdrop error.</li> <li>DragonNft__SoldOut: Contract sold out error.</li> </ul>"},{"location":"02-bragonContract/#variables","title":"Variables","text":"<ul> <li>i_mintFee: Immutable variable representing the minting fee.</li> <li>s_tokenCounter: Counter for tracking the number of minted tokens.</li> <li>MAX_CHANCE_VALUE: Constant representing the maximum chance value.</li> <li>i_maxSupply: Immutable variable representing the maximum supply of NFTs.</li> <li>s_genTokenUris: Array storing the URIs of generated tokens.</li> <li>s_initialized: Boolean indicating whether the contract is initialized.</li> <li>i_blast: Instance of the <code>IBlast</code> interface for handling yield and gas operations.</li> </ul>"},{"location":"02-bragonContract/#constructor","title":"Constructor","text":""},{"location":"02-bragonContract/#dragonnft","title":"<code>DragonNft</code>","text":"<pre><code>constructor(uint256 mintFee, string[10] memory genTokenUris, uint256 maxSupply) ERC721(\"Bragon\", \"BRAG\")\n</code></pre> <p>Constructor initializes the <code>DragonNft</code> contract with the minting fee, token URIs, and maximum supply.</p>"},{"location":"02-bragonContract/#functions","title":"Functions","text":""},{"location":"02-bragonContract/#mintnft","title":"<code>mintNft</code>","text":"<pre><code>function mintNft() public payable\n</code></pre> <p>Mints a new NFT, requires payment of the minting fee.</p>"},{"location":"02-bragonContract/#airdroptoken","title":"<code>airdropToken</code>","text":"<pre><code>function airdropToken(uint64[] calldata quantity, address[] calldata recipients) external onlyOwner\n</code></pre> <p>Airdrops tokens to specified recipients based on the provided quantities.</p>"},{"location":"02-bragonContract/#withdraw","title":"<code>withdraw</code>","text":"<pre><code>function withdraw() public onlyOwner\n</code></pre> <p>Withdraws the contract's ETH balance to the owner.</p>"},{"location":"02-bragonContract/#_initializecontract","title":"<code>_initializeContract</code>","text":"<pre><code>function _initializeContract(string[10] memory genTokenUris) private\n</code></pre> <p>Initializes the contract with generated token URIs.</p>"},{"location":"02-bragonContract/#claimyield-claimallyield-claimallgas-claimmaxgas","title":"<code>claimYield</code>, <code>claimAllYield</code>, <code>claimAllGas</code>, <code>claimMaxGas</code>","text":"<p>Functions for claiming yield and gas rewards using the <code>IBlast</code> interface.</p>"},{"location":"02-bragonContract/#readclaimableyield-readgasparams","title":"<code>readClaimableYield</code>, <code>readGasParams</code>","text":"<p>Functions for reading claimable yield and gas parameters using the <code>IBlast</code> interface.</p>"},{"location":"02-bragonContract/#view-and-pure-functions","title":"View and Pure Functions","text":""},{"location":"02-bragonContract/#getmintfee","title":"<code>getMintFee</code>","text":"<pre><code>function getMintFee() public view returns (uint256)\n</code></pre> <p>Returns the current minting fee.</p>"},{"location":"02-bragonContract/#getgentokenuris","title":"<code>getgenTokenUris</code>","text":"<pre><code>function getgenTokenUris(uint256 index) public view returns (string memory)\n</code></pre> <p>Returns the URI of a generated token at the specified index.</p>"},{"location":"02-bragonContract/#getinitialized","title":"<code>getInitialized</code>","text":"<pre><code>function getInitialized() public view returns (bool)\n</code></pre> <p>Returns whether the contract is initialized.</p>"},{"location":"02-bragonContract/#gettokencounter","title":"<code>getTokenCounter</code>","text":"<pre><code>function getTokenCounter() public view returns (uint256)\n</code></pre> <p>Returns the current value of the token counter.</p> <p>Feel free to modify or extend this template to suit your specific documentation needs.</p>"},{"location":"03-battleArenaContract/","title":"Bragon Nft Arena Contract","text":""},{"location":"03-battleArenaContract/#overview","title":"Overview","text":"<p>The <code>NFTBattleArena</code> contract is a Solidity smart contract that facilitates battles between NFTs (Non-Fungible Tokens) listed for battle. The contract supports various functionalities such as listing NFTs, starting battles, determining winners based on specified attributes, and claiming rewards. Additionally, it incorporates the <code>IBlast</code> interface for handling yield and gas-related operations.</p>"},{"location":"03-battleArenaContract/#contract-structure","title":"Contract Structure","text":""},{"location":"03-battleArenaContract/#contract-inheritance","title":"Contract Inheritance","text":"<p>The <code>NFTBattleArena</code> contract inherits from the <code>Ownable</code> contract, providing ownership control over the contract.</p>"},{"location":"03-battleArenaContract/#enums","title":"Enums","text":""},{"location":"03-battleArenaContract/#terraria","title":"<code>Terraria</code>","text":"<ul> <li>DESERT: Represents the terraria type \"Desert.\"</li> <li>MOUNTAIN: Represents the terraria type \"Mountain.\"</li> <li>VALLEY: Represents the terraria type \"Valley.\"</li> </ul>"},{"location":"03-battleArenaContract/#yieldmode","title":"<code>YieldMode</code>","text":"<ul> <li>AUTOMATIC: Automatic yield mode.</li> <li>VOID: Void yield mode.</li> <li>CLAIMABLE: Claimable yield mode.</li> </ul>"},{"location":"03-battleArenaContract/#gasmode","title":"<code>GasMode</code>","text":"<ul> <li>VOID: Void gas mode.</li> <li>CLAIMABLE: Claimable gas mode.</li> </ul>"},{"location":"03-battleArenaContract/#structs","title":"Structs","text":""},{"location":"03-battleArenaContract/#nftattributes","title":"<code>NFTAttributes</code>","text":"<ul> <li>speed: Speed attribute of an NFT.</li> <li>damage: Damage attribute of an NFT.</li> <li>intelligence: Intelligence attribute of an NFT.</li> <li>hp: Health points attribute of an NFT.</li> </ul>"},{"location":"03-battleArenaContract/#battle","title":"<code>Battle</code>","text":"<ul> <li>nft1Id: Token ID of the defending NFT.</li> <li>nft2Id: Token ID of the attacking NFT.</li> <li>startTime: Start time of the battle.</li> <li>isFinished: Flag indicating whether the battle is finished.</li> </ul>"},{"location":"03-battleArenaContract/#events","title":"Events","text":"<ul> <li>ItemListed: Fired when an NFT is listed for battle.</li> <li>ItemCanceled: Fired when an NFT listing is canceled.</li> <li>TerrariaChosen: Fired when a terraria type is chosen for a battle.</li> <li>WinnerPicked: Fired when a winner is determined in a battle.</li> <li>ItemBurned: Fired when an NFT is burned.</li> </ul>"},{"location":"03-battleArenaContract/#modifiers","title":"Modifiers","text":"<ul> <li>isOwner: Checks if the caller is the owner of a specified NFT.</li> <li>isListed: Checks if an NFT is listed for battle.</li> </ul>"},{"location":"03-battleArenaContract/#functions","title":"Functions","text":""},{"location":"03-battleArenaContract/#setnftattributes","title":"<code>setNFTAttributes</code>","text":"<pre><code>function setNFTAttributes(uint256 tokenId, NFTAttributes calldata _attributes) public onlyOwner\n</code></pre> <p>Sets the attributes of an NFT.</p>"},{"location":"03-battleArenaContract/#listnftforbattle","title":"<code>listNFTForBattle</code>","text":"<pre><code>function listNFTForBattle(uint256 tokenId) public isOwner(tokenId, msg.sender)\n</code></pre> <p>Lists an NFT for battle.</p>"},{"location":"03-battleArenaContract/#unlistnftfrombattle","title":"<code>unlistNFTFromBattle</code>","text":"<pre><code>function unlistNFTFromBattle(uint256 tokenId) public isOwner(tokenId, msg.sender)\n</code></pre> <p>Unlists an NFT from battle.</p>"},{"location":"03-battleArenaContract/#burnitem","title":"<code>burnItem</code>","text":"<pre><code>function burnItem(uint256 tokenId) public\n</code></pre> <p>Burns an NFT, transferring it to the burn address.</p>"},{"location":"03-battleArenaContract/#startbattle","title":"<code>startBattle</code>","text":"<pre><code>function startBattle(uint256 _tokenIdDef, uint256 _tokenIdAtk, uint256 _randomInt) public isListed(_tokenIdDef) isOwner(_tokenIdAtk, msg.sender)\n</code></pre> <p>Starts a battle between two NFTs.</p>"},{"location":"03-battleArenaContract/#getattributes","title":"<code>getAttributes</code>","text":"<pre><code>function getAttributes(uint256 _tokenId) public view returns (NFTAttributes memory)\n</code></pre> <p>Gets the attributes of an NFT.</p>"},{"location":"03-battleArenaContract/#getwinnertokenid","title":"<code>getWinnerTokenId</code>","text":"<pre><code>function getWinnerTokenId() public view returns (uint256)\n</code></pre> <p>Gets the Token ID of the winner in the last battle.</p>"},{"location":"03-battleArenaContract/#getlosertokenid","title":"<code>getLoserTokenId</code>","text":"<pre><code>function getLoserTokenId() public view returns (uint256)\n</code></pre> <p>Gets the Token ID of the loser in the last battle.</p>"},{"location":"03-battleArenaContract/#checkterraria","title":"<code>checkTerraria</code>","text":"<pre><code>function checkTerraria() public view returns (uint256)\n</code></pre> <p>Gets the current terraria type chosen for the battle.</p>"},{"location":"03-battleArenaContract/#claimyield","title":"<code>claimYield</code>","text":"<pre><code>function claimYield(address recipient, uint256 amount) external onlyOwner\n</code></pre> <p>Claims yield for the specified amount on behalf of the contract.</p>"},{"location":"03-battleArenaContract/#claimallyield","title":"<code>claimAllYield</code>","text":"<pre><code>function claimAllYield(address recipient) external onlyOwner\n</code></pre> <p>Claims all available yield on behalf of the contract.</p>"},{"location":"03-battleArenaContract/#claimallgas","title":"<code>claimAllGas</code>","text":"<pre><code>function claimAllGas(address recipient) external onlyOwner\n</code></pre> <p>Claims all available gas on behalf of the contract.</p>"},{"location":"03-battleArenaContract/#claimmaxgas","title":"<code>claimMaxGas</code>","text":"<pre><code>function claimMaxGas(address recipient) external onlyOwner\n</code></pre> <p>Claims fully vested gas (at a 0% tax rate) on behalf of the contract.</p>"},{"location":"03-battleArenaContract/#readclaimableyield","title":"<code>readClaimableYield</code>","text":"<pre><code>function readClaimableYield() public view returns (uint256)\n</code></pre> <p>Reads the amount of claimable yield for the contract.</p>"},{"location":"03-battleArenaContract/#readgasparams","title":"<code>readGasParams</code>","text":"<pre><code>function readGasParams() public view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode)\n</code></pre> <p>Reads the gas-related parameters for the contract.</p>"},{"location":"03-battleArenaContract/#constructor","title":"Constructor","text":""},{"location":"03-battleArenaContract/#nftbattlearena","title":"<code>NFTBattleArena</code>","text":"<pre><code>constructor(address _nftCollection) \n</code></pre> <p>Constructor initializes the <code>NFTBattleArena</code> contract with the address of the NFT collection contract.</p>"}]}